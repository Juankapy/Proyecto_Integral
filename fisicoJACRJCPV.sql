/*
DROP TABLE NOTIFICACIONES_RECIBIDAS CASCADE CONSTRAINTS;
DROP TABLE IDENTIFICACION_PATOLOGIAS CASCADE CONSTRAINTS;
DROP TABLE PETICIONES_ADOPCION CASCADE CONSTRAINTS;
DROP TABLE RESERVAS_CITAS CASCADE CONSTRAINTS;
DROP TABLE REDES_SOCIALES CASCADE CONSTRAINTS;
DROP TABLE NOTIFICACION CASCADE CONSTRAINTS;
DROP TABLE PATOLOGIA CASCADE CONSTRAINTS;
DROP TABLE PERROS CASCADE CONSTRAINTS;
DROP TABLE RAZA CASCADE CONSTRAINTS;
DROP TABLE PROTECTORA CASCADE CONSTRAINTS;
DROP TABLE CLIENTE CASCADE CONSTRAINTS;
DROP TABLE USUARIO CASCADE CONSTRAINTS;

DROP SEQUENCE SEQ_USUARIO_ID;
DROP SEQUENCE SEQ_CLIENTE_ID;
DROP SEQUENCE SEQ_PROTECTORA_ID;
DROP SEQUENCE SEQ_RAZA_ID;
DROP SEQUENCE SEQ_PERRO_ID;
DROP SEQUENCE SEQ_PATOLOGIA_ID;
DROP SEQUENCE SEQ_RESERVA_CITA_ID;
DROP SEQUENCE SEQ_PETICION_ID;
DROP SEQUENCE SEQ_NOTIFICACION_ID;
DROP SEQUENCE SEQ_RED_SOCIAL_ID;
*/

-- ========= CREACIÓN DE SECUENCIAS =========
CREATE SEQUENCE SEQ_USUARIO_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_CLIENTE_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_PROTECTORA_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_RAZA_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_PERRO_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_PATOLOGIA_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_RESERVA_CITA_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_PETICION_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_NOTIFICACION_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_RED_SOCIAL_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;


-- ========= CREACIÓN DE TABLAS =========

CREATE TABLE USUARIO (
    ID_USUARIO NUMBER DEFAULT SEQ_USUARIO_ID.NEXTVAL PRIMARY KEY,
    NOMBRE_USU VARCHAR2(50) NOT NULL UNIQUE,
    CONTRASENA VARCHAR2(100) NOT NULL,
    Rol Char(10) DEFAULT 'Cliente' NOT NULL CHECK (Rol IN ('Cliente','Protectora'),
    ;

CREATE TABLE CLIENTE (
    ID_CLIENTE NUMBER DEFAULT SEQ_CLIENTE_ID.NEXTVAL PRIMARY KEY,
    NIF VARCHAR2(9) UNIQUE,
    NOMBRE VARCHAR2(50) NOT NULL,
    APELLIDOS VARCHAR2(100) NOT NULL,
    FECHA_NACIMIENTO DATE,
    PROVINCIA VARCHAR2(50) NOT NULL,
    CIUDAD VARCHAR2(100) NOT NULL,
    CALLE VARCHAR2(150) NOT NULL,
    CP VARCHAR2(5) NOT NULL,
    TELEFONO VARCHAR2(15),
    EMAIL VARCHAR2(100) NOT NULL UNIQUE,
    ID_USUARIO NUMBER UNIQUE,
    CONSTRAINT FK_CLIENTE_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE
);

CREATE TABLE PROTECTORA (
    ID_PROTECTORA NUMBER DEFAULT SEQ_PROTECTORA_ID.NEXTVAL PRIMARY KEY,
    CIF VARCHAR2(9) UNIQUE NOT NULL,
    NOMBRE VARCHAR2(100) NOT NULL,
    TELEFONO VARCHAR2(15) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL,
    PROVINCIA VARCHAR2(50) NOT NULL,
    CIUDAD VARCHAR2(100) NOT NULL,
    CALLE VARCHAR2(150) NOT NULL,
    CP VARCHAR2(5) NOT NULL,
    ID_USUARIO NUMBER UNIQUE,
    CONSTRAINT FK_PROTECTORA_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE
);

CREATE TABLE RAZA (
    ID_RAZA NUMBER DEFAULT SEQ_RAZA_ID.NEXTVAL PRIMARY KEY,
    NOMBRE_RAZA VARCHAR2(50) NOT NULL UNIQUE
);

CREATE TABLE PERROS (
    ID_PERRO NUMBER DEFAULT SEQ_PERRO_ID.NEXTVAL PRIMARY KEY,
    NOMBRE VARCHAR2(50) NOT NULL,
    SEXO VARCHAR2(6) NOT NULL CHECK (SEXO IN ('Macho', 'Hembra')),
    FECHA_NACIMIENTO DATE,
    ADOPTADO CHAR(1) DEFAULT 'N' NOT NULL CHECK (ADOPTADO IN ('S','N')),
    FOTO VARCHAR2(255),
    ID_PROTECTORA NUMBER NOT NULL,
    ID_RAZA NUMBER NOT NULL,
    DESCRIPCION_PERRO VARCHAR2(500),
    CONSTRAINT FK_PERRO_PROTECTORA FOREIGN KEY (ID_PROTECTORA) REFERENCES PROTECTORA(ID_PROTECTORA) ON DELETE CASCADE,
    CONSTRAINT FK_PERRO_RAZA FOREIGN KEY (ID_RAZA) REFERENCES RAZA(ID_RAZA)
);

CREATE TABLE PATOLOGIA (
    ID_PATOLOGIA NUMBER DEFAULT SEQ_PATOLOGIA_ID.NEXTVAL PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL UNIQUE,
    DESCRIPCION_PATOLOGIA VARCHAR2(255)
);

CREATE TABLE IDENTIFICACION_PATOLOGIAS (
    ID_PERRO NUMBER,
    ID_PATOLOGIA NUMBER,
    NOTAS_ESPECIFICAS VARCHAR2(255),
    CONSTRAINT PK_IDENT_PATOLOGIA PRIMARY KEY (ID_PERRO, ID_PATOLOGIA),
    CONSTRAINT FK_IDENTP_PERRO FOREIGN KEY (ID_PERRO) REFERENCES PERROS(ID_PERRO) ON DELETE CASCADE,
    CONSTRAINT FK_IDENTP_PATOLOGIA FOREIGN KEY (ID_PATOLOGIA) REFERENCES PATOLOGIA(ID_PATOLOGIA) ON DELETE CASCADE
);

CREATE TABLE RESERVAS_CITAS (
    ID_RESERVA_CITA NUMBER DEFAULT SEQ_RESERVA_CITA_ID.NEXTVAL PRIMARY KEY,
    FECHA DATE NOT NULL,
    HORA VARCHAR2(8) NOT NULL,
    MOTIVO VARCHAR2(255),
    ID_CLIENTE NUMBER NOT NULL,
    ID_PERRO NUMBER,
    ID_PROTECTORA NUMBER NOT NULL,
    ESTADO_CITA VARCHAR2(20) DEFAULT 'Pendiente' NOT NULL CHECK (ESTADO_CITA IN ('Pendiente', 'Confirmada', 'Cancelada', 'Completada')),
    CONSTRAINT FK_RESERVA_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE) ON DELETE CASCADE,
    CONSTRAINT FK_RESERVA_PERRO FOREIGN KEY (ID_PERRO) REFERENCES PERROS(ID_PERRO) ON DELETE SET NULL,
    CONSTRAINT FK_RESERVA_PROTECTORA FOREIGN KEY (ID_PROTECTORA) REFERENCES PROTECTORA(ID_PROTECTORA) ON DELETE CASCADE
);

CREATE TABLE PETICIONES_ADOPCION (
    ID_PETICION NUMBER DEFAULT SEQ_PETICION_ID.NEXTVAL PRIMARY KEY,
    FECHA DATE DEFAULT SYSDATE NOT NULL,
    ESTADO VARCHAR2(20) DEFAULT 'Pendiente' NOT NULL CHECK (ESTADO IN ('Pendiente', 'Aceptada', 'Rechazada', 'En Proceso')),
    ID_CLIENTE NUMBER NOT NULL,
    ID_PERRO NUMBER NOT NULL,
    MENSAJE_PETICION VARCHAR2(500),
    NOTAS_PROTECTORA VARCHAR2(500),
    CONSTRAINT FK_PETICION_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE) ON DELETE CASCADE,
    CONSTRAINT FK_PETICION_PERRO FOREIGN KEY (ID_PERRO) REFERENCES PERROS(ID_PERRO) ON DELETE CASCADE
);

CREATE TABLE NOTIFICACION (
    ID_NOTIFICACION NUMBER DEFAULT SEQ_NOTIFICACION_ID.NEXTVAL PRIMARY KEY,
    FECHA_GENERACION TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    MENSAJE VARCHAR2(500) NOT NULL,
    TIPO_NOTIFICACION VARCHAR2(50),
    ID_ENTIDAD_RELACIONADA NUMBER,
    ENTIDAD_TIPO VARCHAR2(50)
);

CREATE TABLE NOTIFICACIONES_RECIBIDAS (
    ID_USUARIO NUMBER,
    ID_NOTIFICACION NUMBER,
    LEIDA CHAR(1) DEFAULT 'N' NOT NULL CHECK (LEIDA IN ('S','N')),
    FECHA_LEIDA TIMESTAMP,
    CONSTRAINT PK_NOTIF_RECIBIDA PRIMARY KEY (ID_USUARIO, ID_NOTIFICACION),
    CONSTRAINT FK_NOTIFREC_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE,
    CONSTRAINT FK_NOTIFREC_NOTIF FOREIGN KEY (ID_NOTIFICACION) REFERENCES NOTIFICACION(ID_NOTIFICACION) ON DELETE CASCADE
);

CREATE TABLE REDES_SOCIALES (
    ID_RED_SOCIAL NUMBER DEFAULT SEQ_RED_SOCIAL_ID.NEXTVAL PRIMARY KEY,
    PLATAFORMA VARCHAR2(50) NOT NULL,
    URL VARCHAR2(255) NOT NULL,
    ID_PROTECTORA NUMBER NOT NULL,
    CONSTRAINT UQ_PROTECTORA_PLATAFORMA UNIQUE (ID_PROTECTORA, PLATAFORMA),
    CONSTRAINT FK_REDSOCIAL_PROTECTORA FOREIGN KEY (ID_PROTECTORA) REFERENCES PROTECTORA(ID_PROTECTORA) ON DELETE CASCADE
);


ALTER TABLE USUARIO ADD ROL VARCHAR2(20) DEFAULT 'CLIENTE' NOT NULL CHECK (ROL IN ('CLIENTE', 'PROTECTORA'));
ALTER TABLE CLIENTE ADD RUTA_FOTO_PERFIL VARCHAR2(255);

-- ========= FUNCIÓN: Obtener ID de usuario desde ID de protectora asociada a un perro =========

CREATE OR REPLACE FUNCTION usuario_por_perro(id_perro_in NUMBER)
RETURN NUMBER
IS
    resultado NUMBER;
BEGIN
    SELECT u.id_usuario
    INTO resultado
    FROM perros p
    JOIN protectora pr ON p.id_protectora = pr.id_protectora
    JOIN usuario u ON pr.id_usuario = u.id_usuario
    WHERE p.id_perro = id_perro_in;

    RETURN resultado;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END;
/

-- ========= PROCEDIMIENTO: Crear notificación y asignarla a un usuario =========

CREATE OR REPLACE PROCEDURE crear_notificacion(
    mensaje_in VARCHAR2,
    tipo_in VARCHAR2,
    id_entidad NUMBER,
    tipo_entidad VARCHAR2,
    id_usuario NUMBER
)
IS
    id_notif NUMBER;
BEGIN
    INSERT INTO notificacion (
        mensaje,
        tipo_notificacion,
        id_entidad_relacionada,
        entidad_tipo
    ) VALUES (
        mensaje_in,
        tipo_in,
        id_entidad,
        tipo_entidad
    )
    RETURNING id_notificacion INTO id_notif;

    INSERT INTO notificaciones_recibidas (
        id_usuario,
        id_notificacion
    ) VALUES (
        id_usuario,
        id_notif
    );
END;
/

-- ========= DISPARADOR: Nueva petición de adopción =========

CREATE OR REPLACE TRIGGER nueva_peticion
AFTER INSERT ON peticiones_adopcion
FOR EACH ROW
DECLARE
    usuario_destino NUMBER;
BEGIN
    usuario_destino := usuario_por_perro(:NEW.id_perro);

    IF usuario_destino IS NOT NULL THEN
        crear_notificacion(
            'Se ha creado una nueva petición de adopción.',
            'Petición',
            :NEW.id_peticion,
            'peticiones_adopcion',
            usuario_destino
        );
    END IF;
END;
/

-- ========= DISPARADOR: Nueva reserva de cita =========

CREATE OR REPLACE TRIGGER nueva_reserva
AFTER INSERT ON reservas_citas
FOR EACH ROW
DECLARE
    usuario_destino NUMBER;
BEGIN
    SELECT u.id_usuario
    INTO usuario_destino
    FROM protectora p
    JOIN usuario u ON p.id_usuario = u.id_usuario
    WHERE p.id_protectora = :NEW.id_protectora;

    IF usuario_destino IS NOT NULL THEN
        crear_notificacion(
            'Se ha registrado una nueva reserva de cita.',
            'Reserva',
            :NEW.id_reserva_cita,
            'reservas_citas',
            usuario_destino
        );
    END IF;
END;
/

-- ========= DISPARADOR: Cambio de estado en una petición de adopción =========

CREATE OR REPLACE TRIGGER estado_peticion
AFTER UPDATE OF estado ON peticiones_adopcion
FOR EACH ROW
WHEN (OLD.estado != NEW.estado)
DECLARE
    usuario_destino NUMBER;
    mensaje_estado VARCHAR2(100);
BEGIN
    -- Obtener el id_usuario del cliente asociado
    SELECT c.id_usuario
    INTO usuario_destino
    FROM cliente c
    WHERE c.id_cliente = :NEW.id_cliente;

    -- Componer mensaje según nuevo estado
    mensaje_estado := 'El estado de tu petición de adopción ha cambiado a "' || :NEW.estado || '".';

    IF usuario_destino IS NOT NULL THEN
        crear_notificacion(
            mensaje_estado,
            'Estado Petición',
            :NEW.id_peticion,
            'peticiones_adopcion',
            usuario_destino
        );
    END IF;
END;
/

-- Asumir que ya tienes insertados:
-- Protectora con ID_Protectora = 1 (ej. 'Amigos Peludos')
-- Raza con ID_Raza = 1 (ej. 'Labrador Retriever')
-- Patologia con ID_Patologia = 1 (ej. 'Alergia al Pollo')
-- Perro con ID_Perro = 101 (Buddy, el Labrador)

-- (1) Inserta una protectora si no existe una con ID=1
-- Comprueba primero si existe: SELECT * FROM Protectora WHERE ID_Protectora = 1;
-- Si no existe:
INSERT INTO Protectora (ID_Protectora, Nombre, Telefono, Email, Provincia, Ciudad, Calle, CP, ID_Usuario)
VALUES (1, 'Amigos Peludos', '911223344', 'info@amigospeludos.org', 'Madrid', 'Madrid', 'Calle de los Animales 10', '28010', NULL); -- Asume que no está ligada a un usuario específico de login

-- (2) Inserta una raza si no existe una con ID=1
-- Comprueba primero: SELECT * FROM Raza WHERE ID_Raza = 1;
-- Si no existe:
INSERT INTO Raza (ID_Raza, Nombre_Raza) VALUES (1, 'Labrador Retriever');

-- (3) Inserta una patología si no existe una con ID=1
-- Comprueba primero: SELECT * FROM Patologia WHERE ID_Patologia = 1;
-- Si no existe:
INSERT INTO Patologia (ID_Patologia, Nombre) VALUES (1, 'Alergia al Pollo');

-- (4) Inserta el perro Buddy (ID=101) si no lo has hecho con la Foto correcta
-- Si ya lo insertaste con la ruta, está bien. Si no:
DELETE FROM Perros WHERE ID_Perro = 101; -- Borrar si ya existe para reinsertar
INSERT INTO Perros (ID_Perro, Nombre, Sexo, FechaNacimiento, Adoptado, Foto, ID_Protectora, ID_Raza)
VALUES (101, 'Buddy', 'Macho', TO_DATE('2022-03-15', 'YYYY-MM-DD'), 'N', '/assets/Imagenes/perros/buddy_labrador.jpg', 1, 1);

-- (5) Asocia la patología 'Alergia al Pollo' (ID 1) al perro 'Buddy' (ID 101)
INSERT INTO Identificacion_Patologias (ID_Perro, ID_Patologia)
VALUES (101, 1);

COMMIT;
ALTER TABLE Cliente ADD (FECHA_NACIMIENTO DATE);
ALTER TABLE Protectora ADD (CIF VARCHAR2(9) UNIQUE);
ALTER TABLE Patologia ADD (Descripcion VARCHAR2(255));
