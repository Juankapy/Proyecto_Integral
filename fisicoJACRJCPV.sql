/*
DROP TABLE NOTIFICACIONES_RECIBIDAS CASCADE CONSTRAINTS;
DROP TABLE IDENTIFICACION_PATOLOGIAS CASCADE CONSTRAINTS;
DROP TABLE PETICIONES_ADOPCION CASCADE CONSTRAINTS;
DROP TABLE RESERVAS_CITAS CASCADE CONSTRAINTS;
DROP TABLE REDES_SOCIALES CASCADE CONSTRAINTS;
DROP TABLE NOTIFICACION CASCADE CONSTRAINTS;
DROP TABLE PATOLOGIA CASCADE CONSTRAINTS;
DROP TABLE PERROS CASCADE CONSTRAINTS;
DROP TABLE RAZA CASCADE CONSTRAINTS;
DROP TABLE PROTECTORA CASCADE CONSTRAINTS;
DROP TABLE CLIENTE CASCADE CONSTRAINTS;
DROP TABLE USUARIO CASCADE CONSTRAINTS;

DROP SEQUENCE SEQ_USUARIO_ID;
DROP SEQUENCE SEQ_CLIENTE_ID;
DROP SEQUENCE SEQ_PROTECTORA_ID;
DROP SEQUENCE SEQ_RAZA_ID;
DROP SEQUENCE SEQ_PERRO_ID;
DROP SEQUENCE SEQ_PATOLOGIA_ID;
DROP SEQUENCE SEQ_RESERVA_CITA_ID;
DROP SEQUENCE SEQ_PETICION_ID;
DROP SEQUENCE SEQ_NOTIFICACION_ID;
DROP SEQUENCE SEQ_RED_SOCIAL_ID;
*/

-- ========= CREACIÓN DE SECUENCIAS =========
CREATE SEQUENCE SEQ_USUARIO_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_CLIENTE_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_PROTECTORA_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_RAZA_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_PERRO_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_PATOLOGIA_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_RESERVA_CITA_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_PETICION_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_NOTIFICACION_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_RED_SOCIAL_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

-- ========= CREACIÓN DE TABLAS =========

CREATE TABLE USUARIO (
    ID_USUARIO NUMBER DEFAULT SEQ_USUARIO_ID.NEXTVAL PRIMARY KEY,
    NOMBRE_USU VARCHAR2(50) NOT NULL UNIQUE,
    CONTRASENA VARCHAR2(100) NOT NULL,
    Rol Char(10) DEFAULT 'CLIENTE' NOT NULL CHECK (Rol IN ('CLIENTE','PROTECTORA')))
    ;

CREATE TABLE CLIENTE (
    ID_CLIENTE NUMBER DEFAULT SEQ_CLIENTE_ID.NEXTVAL PRIMARY KEY,
    NIF VARCHAR2(9) UNIQUE,
    NOMBRE VARCHAR2(50) NOT NULL,
    APELLIDOS VARCHAR2(100) NOT NULL,
    FECHA_NACIMIENTO DATE,
    PROVINCIA VARCHAR2(50) NOT NULL,
    CIUDAD VARCHAR2(100) NOT NULL,
    CALLE VARCHAR2(150) NOT NULL,
    CP VARCHAR2(5) NOT NULL,
    TELEFONO VARCHAR2(15),
    EMAIL VARCHAR2(100) NOT NULL UNIQUE,
    ID_USUARIO NUMBER UNIQUE,
    FECHA_CREACION DATE,
    FECHA_MODIFICACION DATE,
    CONSTRAINT FK_CLIENTE_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE
);

CREATE TABLE PROTECTORA (
    ID_PROTECTORA NUMBER DEFAULT SEQ_PROTECTORA_ID.NEXTVAL PRIMARY KEY,
    CIF VARCHAR2(9) UNIQUE NOT NULL,
    NOMBRE VARCHAR2(100) NOT NULL,
    TELEFONO VARCHAR2(15) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL,
    PROVINCIA VARCHAR2(50) NOT NULL,
    CIUDAD VARCHAR2(100) NOT NULL,
    CALLE VARCHAR2(150) NOT NULL,
    CP VARCHAR2(5) NOT NULL,
    ID_USUARIO NUMBER UNIQUE,
    FECHA_CREACION DATE,
    FECHA_MODIFICACION DATE,
    CONSTRAINT FK_PROTECTORA_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE
);

CREATE TABLE RAZA (
    ID_RAZA NUMBER DEFAULT SEQ_RAZA_ID.NEXTVAL PRIMARY KEY,
    NOMBRE_RAZA VARCHAR2(50) NOT NULL UNIQUE
);

CREATE TABLE PERROS (
    ID_PERRO NUMBER DEFAULT SEQ_PERRO_ID.NEXTVAL PRIMARY KEY,
    NOMBRE VARCHAR2(50) NOT NULL,
    SEXO VARCHAR2(6) NOT NULL CHECK (SEXO IN ('Macho', 'Hembra')),
    FECHA_NACIMIENTO DATE,
    ADOPTADO CHAR(1) DEFAULT 'N' NOT NULL CHECK (ADOPTADO IN ('S','N')),
    FOTO VARCHAR2(255),
    ID_PROTECTORA NUMBER NOT NULL,
    ID_RAZA NUMBER NOT NULL,
    CONSTRAINT FK_PERRO_PROTECTORA FOREIGN KEY (ID_PROTECTORA) REFERENCES PROTECTORA(ID_PROTECTORA) ON DELETE CASCADE,
    CONSTRAINT FK_PERRO_RAZA FOREIGN KEY (ID_RAZA) REFERENCES RAZA(ID_RAZA)
);

CREATE TABLE PATOLOGIA (
    ID_PATOLOGIA NUMBER DEFAULT SEQ_PATOLOGIA_ID.NEXTVAL PRIMARY KEY,
    NOMBRE VARCHAR2(100) NOT NULL UNIQUE,
    DESCRIPCION_PATOLOGIA VARCHAR2(255)
);

CREATE TABLE IDENTIFICACION_PATOLOGIAS (
    ID_PERRO NUMBER,
    ID_PATOLOGIA NUMBER,
    NOTAS_ESPECIFICAS VARCHAR2(255),
    CONSTRAINT PK_IDENT_PATOLOGIA PRIMARY KEY (ID_PERRO, ID_PATOLOGIA),
    CONSTRAINT FK_IDENTP_PERRO FOREIGN KEY (ID_PERRO) REFERENCES PERROS(ID_PERRO) ON DELETE CASCADE,
    CONSTRAINT FK_IDENTP_PATOLOGIA FOREIGN KEY (ID_PATOLOGIA) REFERENCES PATOLOGIA(ID_PATOLOGIA) ON DELETE CASCADE
);

CREATE TABLE RESERVAS_CITAS (
    ID_RESERVA_CITA NUMBER DEFAULT SEQ_RESERVA_CITA_ID.NEXTVAL PRIMARY KEY,
    FECHA DATE NOT NULL,
    HORA VARCHAR2(8) NOT NULL,
    DONACION NUMBER(10,2) CHECK (DONACION >= 3),
    ID_CLIENTE NUMBER NOT NULL,
    ID_PERRO NUMBER,
    ID_PROTECTORA NUMBER NOT NULL,
    ESTADO_CITA VARCHAR2(20) DEFAULT 'Pendiente' NOT NULL 
    CHECK (ESTADO_CITA IN ('Pendiente', 'Confirmada', 'Cancelada', 'Completada')),
    CONSTRAINT FK_RESERVA_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE) ON DELETE CASCADE,
    CONSTRAINT FK_RESERVA_PERRO FOREIGN KEY (ID_PERRO) REFERENCES PERROS(ID_PERRO) ON DELETE CASCADE,
    CONSTRAINT FK_RESERVA_PROTECTORA FOREIGN KEY (ID_PROTECTORA) REFERENCES PROTECTORA(ID_PROTECTORA) ON DELETE CASCADE
);


CREATE TABLE PETICIONES_ADOPCION (
    ID_PETICION NUMBER DEFAULT SEQ_PETICION_ID.NEXTVAL PRIMARY KEY,
    FECHA DATE DEFAULT SYSDATE NOT NULL,
    ESTADO_ADOPCION VARCHAR2(20) DEFAULT 'Pendiente' NOT NULL CHECK (ESTADO_ADOPCION IN ('Pendiente', 'Aceptada', 'Rechazada')),
    ID_CLIENTE NUMBER NOT NULL,
    ID_PERRO NUMBER NOT NULL,
    ID_PROTECTORA NUMBER NOT NULL,
    CONSTRAINT FK_PETICION_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE) ON DELETE CASCADE,
    CONSTRAINT FK_PETICION_PERRO FOREIGN KEY (ID_PERRO) REFERENCES PERROS(ID_PERRO) ON DELETE CASCADE,
    CONSTRAINT FK_PETICION_PROTECTORA FOREIGN KEY (ID_PROTECTORA) REFERENCES PROTECTORA(ID_PROTECTORA) ON DELETE CASCADE
);

CREATE TABLE NOTIFICACION (
    ID_NOTIFICACION NUMBER DEFAULT SEQ_NOTIFICACION_ID.NEXTVAL PRIMARY KEY,
    FECHA_GENERACION TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    MENSAJE VARCHAR2(500) NOT NULL,
    TIPO_NOTIFICACION VARCHAR2(50),
    ID_ENTIDAD_RELACIONADA NUMBER,
    ENTIDAD_TIPO VARCHAR2(50)
);

CREATE TABLE NOTIFICACIONES_RECIBIDAS (
    ID_USUARIO NUMBER,
    ID_NOTIFICACION NUMBER,
    LEIDA CHAR(1) DEFAULT 'N' NOT NULL CHECK (LEIDA IN ('S','N')),
    FECHA_LEIDA TIMESTAMP,
    CONSTRAINT PK_NOTIF_RECIBIDA PRIMARY KEY (ID_USUARIO, ID_NOTIFICACION),
    CONSTRAINT FK_NOTIFREC_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO(ID_USUARIO) ON DELETE CASCADE,
    CONSTRAINT FK_NOTIFREC_NOTIF FOREIGN KEY (ID_NOTIFICACION) REFERENCES NOTIFICACION(ID_NOTIFICACION) ON DELETE CASCADE
);

CREATE TABLE REDES_SOCIALES (
    ID_RED_SOCIAL NUMBER DEFAULT SEQ_RED_SOCIAL_ID.NEXTVAL PRIMARY KEY,
    PLATAFORMA VARCHAR2(50) NOT NULL,
    URL VARCHAR2(255) NOT NULL,
    ID_PROTECTORA NUMBER NOT NULL,
    CONSTRAINT UQ_PROTECTORA_PLATAFORMA UNIQUE (ID_PROTECTORA, PLATAFORMA),
    CONSTRAINT FK_REDSOCIAL_PROTECTORA FOREIGN KEY (ID_PROTECTORA) REFERENCES PROTECTORA(ID_PROTECTORA) ON DELETE CASCADE
);

ALTER TABLE CLIENTE ADD RUTA_FOTO_PERFIL VARCHAR2(255);

-- ========= FUNCIÓN MEJORADA: Obtener ID de usuario de la protectora a la que pertenece un perro =========
CREATE OR REPLACE FUNCTION obtener_id_usuario_de_protectora_por_perro( id_perro_especifico IN PERROS.ID_PERRO%TYPE)
RETURN USUARIO.ID_USUARIO%TYPE
IS
    id_usuario_resultado USUARIO.ID_USUARIO%TYPE;
    
BEGIN
    
    SELECT protectora_del_perro.ID_USUARIO
    INTO id_usuario_resultado
    FROM PERROS perro_buscado
    JOIN PROTECTORA protectora_del_perro ON perro_buscado.ID_PROTECTORA = protectora_del_perro.ID_PROTECTORA
    WHERE perro_buscado.ID_PERRO = id_perro_especifico;

    RETURN id_usuario_resultado;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Error Grave: Ningun usuario de protectora encontrado para el perro con ID: ' || id_perro_especifico);
    RAISE;

    WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('Error Grave: Múltiples usuarios de protectora encontrados para el perro con ID: ' || id_perro_especifico);
    RAISE;

    WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE('Error inesperado en "obtener_id_usuario_de_protectora_por_perro" para perro ID ' || id_perro_especifico || ': ' || SQLERRM);
    RAISE; 
END obtener_id_usuario_de_protectora_por_perro;
/

-- ========= PROCEDIMIENTO MEJORADO: Registrar una notificación y asignarla a un usuario específico =========
CREATE OR REPLACE PROCEDURE registrar_y_enviar_notificacion_a_usuario(
    texto_del_mensaje IN NOTIFICACION.MENSAJE%TYPE,
    categoria_notificacion IN NOTIFICACION.TIPO_NOTIFICACION%TYPE,
    id_elemento_relacionado IN NOTIFICACION.ID_ENTIDAD_RELACIONADA%TYPE,
    tabla_elemento_relacionado IN NOTIFICACION.ENTIDAD_TIPO%TYPE,
    id_del_usuario_destino IN USUARIO.ID_USUARIO%TYPE
)
IS
    id_de_la_nueva_notificacion NOTIFICACION.ID_NOTIFICACION%TYPE;
    existe_usuario_destino NUMBER;                           
    error_usuario_destino_no_existe EXCEPTION;
    
    PRAGMA EXCEPTION_INIT(error_usuario_destino_no_existe, -20003); 
BEGIN
    -- Paso 1: Verificar que el usuario al que queremos notificar realmente existe en la tabla USUARIO.
    SELECT COUNT(*)
    INTO existe_usuario_destino
    FROM USUARIO
    WHERE ID_USUARIO = id_del_usuario_destino;

    IF existe_usuario_destino = 0 THEN
    RAISE error_usuario_destino_no_existe;
    END IF;

    -- Paso 2: Si el usuario existe, insertamos el registro principal de la notificación.
    INSERT INTO NOTIFICACION (MENSAJE,TIPO_NOTIFICACION,ID_ENTIDAD_RELACIONADA,ENTIDAD_TIPO) 
    VALUES (texto_del_mensaje,categoria_notificacion,id_elemento_relacionado,tabla_elemento_relacionado)
    
    RETURNING ID_NOTIFICACION INTO id_de_la_nueva_notificacion;

    -- Paso 3: Registramos que esta notificación ha sido recibida por el usuario destino.
    INSERT INTO NOTIFICACIONES_RECIBIDAS (ID_USUARIO,ID_NOTIFICACION) 
    VALUES (id_del_usuario_destino,id_de_la_nueva_notificacion);

EXCEPTION
    WHEN error_usuario_destino_no_existe THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar notificación: El usuario destino con ID ' || id_del_usuario_destino || ' no fue encontrado.');
        RAISE;

    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error al registrar notificación: Se intentó insertar un valor duplicado que viola una restricción de unicidad. Detalles: ' || SQLERRM);
        RAISE;

    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado en "registrar_y_enviar_notificacion_a_usuario". Detalles: ' || SQLERRM);
        RAISE;
END registrar_y_enviar_notificacion_a_usuario;
/

-- ========= DISPARADOR: Cambiar estado de adopcion en Perros =========
CREATE OR REPLACE TRIGGER adopcion_aceptada
AFTER UPDATE OF ESTADO_ADOPCION ON PETICIONES_ADOPCION
FOR EACH ROW
BEGIN
  
  IF :NEW.ESTADO_ADOPCION = 'Aceptada' AND :OLD.ESTADO_ADOPCION != 'Aceptada' THEN
    UPDATE PERROS
    SET ADOPTADO = 'S'
    WHERE ID_PERRO = :NEW.ID_PERRO;
  END IF;
END;
/
-- ========= DISPARADOR: Creacion para CLIENTES =========
CREATE OR REPLACE TRIGGER clientes_creacion
BEFORE INSERT ON CLIENTES
FOR EACH ROW
BEGIN
    :NEW.FECHA_CREACION := SYSDATE;
    :NEW.FECHA_MODIFICACION := SYSDATE;
END;
/

-- ========= DISPARADOR: Actualizacion para CLIENTES =========
CREATE OR REPLACE TRIGGER clientes_actualizacion
BEFORE UPDATE ON CLIENTES
FOR EACH ROW
BEGIN
    :NEW.FECHA_MODIFICACION := SYSDATE;
END;
/

-- ========= DISPARADOR: Creacion para PROTECTORAS =========
CREATE OR REPLACE TRIGGER protectoras_creacion
BEFORE INSERT ON PROTECTORAS
FOR EACH ROW
BEGIN
    :NEW.FECHA_CREACION := SYSDATE;
    :NEW.FECHA_MODIFICACION := SYSDATE;
END;
/

-- ========= DISPARADOR: Actualizacion para PROTECTORAS =========
CREATE OR REPLACE TRIGGER protectoras_actualizacion
BEFORE UPDATE ON PROTECTORAS
FOR EACH ROW
BEGIN
    :NEW.FECHA_MODIFICACION := SYSDATE;
END;
/

             
-- 1. USUARIOS
INSERT INTO USUARIO (ID_USUARIO, NOMBRE_USU, CONTRASENA, ROL) 
VALUES (SEQ_USUARIO_ID.NEXTVAL, 'cliente_ana', 'securepass1', 'CLIENTE');

INSERT INTO USUARIO (ID_USUARIO, NOMBRE_USU, CONTRASENA, ROL)
VALUES (SEQ_USUARIO_ID.NEXTVAL, 'protectora_happy', 'protpass1', 'PROTECTORA');

INSERT INTO USUARIO (ID_USUARIO, NOMBRE_USU, CONTRASENA, ROL)
VALUES (SEQ_USUARIO_ID.NEXTVAL, 'cliente_carlos', 'securepass2', 'CLIENTE');

INSERT INTO USUARIO (ID_USUARIO, NOMBRE_USU, CONTRASENA, ROL)
VALUES (SEQ_USUARIO_ID.NEXTVAL, 'admin_general', 'adminpass', 'PROTECTORA');


-- 2. CLIENTES
-- Asumimos que el ID_USUARIO 1 corresponde a 'cliente_ana'
INSERT INTO CLIENTE (ID_CLIENTE, NIF, NOMBRE, APELLIDOS, FECHA_NACIMIENTO, PROVINCIA, CIUDAD, CALLE, CP, TELEFONO, EMAIL, ID_USUARIO, RUTA_FOTO_PERFIL)
VALUES (SEQ_CLIENTE_ID.NEXTVAL, '12345678A', 'Ana', 'García López', TO_DATE('1990-07-15', 'YYYY-MM-DD'), 'Madrid', 'Madrid', 'Calle Sol 8', '28013', '600112233', 'ana.garcia@email.com', 1, 'fotos/ana_perfil.jpg');

-- Asumimos que el ID_USUARIO 3 corresponde a 'cliente_carlos'
INSERT INTO CLIENTE (ID_CLIENTE, NIF, NOMBRE, APELLIDOS, FECHA_NACIMIENTO, PROVINCIA, CIUDAD, CALLE, CP, TELEFONO, EMAIL, ID_USUARIO, RUTA_FOTO_PERFIL)
VALUES (SEQ_CLIENTE_ID.NEXTVAL, '87654321B', 'Carlos', 'Martínez Ruiz', TO_DATE('1985-03-22', 'YYYY-MM-DD'), 'Barcelona', 'Barcelona', 'Avenida Diagonal 100', '08018', '600998877', 'carlos.martinez@email.com', 3, NULL);

SELECT pa.ID_PETICION, pa.FECHA, p.NOMBRE AS NombrePerro, c.NOMBRE AS NombreAdoptante, c.TELEFONO AS NumeroContacto, pa.ESTADO_ADOPCION 
                FROM PETICIONES_ADOPCION pa 
                JOIN PERROS p ON pa.ID_PERRO = p.ID_PERRO 
                JOIN CLIENTE c ON pa.ID_CLIENTE = c.ID_CLIENTE 
                WHERE pa.ID_PROTECTORA = 1 
                ORDER BY pa.FECHA, pa.ESTADO_ADOPCION DESC;

-- 3. PROTECTORAS
-- Asumimos que el ID_USUARIO 2 corresponde a 'protectora_happy'
INSERT INTO PROTECTORA (ID_PROTECTORA, CIF, NOMBRE, TELEFONO, EMAIL, PROVINCIA, CIUDAD, CALLE, CP, ID_USUARIO)
VALUES (SEQ_PROTECTORA_ID.NEXTVAL, 'A12345670', 'Happy Paws Shelter', '911223344', 'info@happypaws.org', 'Madrid', 'Getafe', 'Calle de la Alegría 5', '28905', 2);

-- Asumimos que el ID_USUARIO 4 (admin_general) también es una 'Protectora'
INSERT INTO PROTECTORA (ID_PROTECTORA, CIF, NOMBRE, TELEFONO, EMAIL, PROVINCIA, CIUDAD, CALLE, CP, ID_USUARIO)
VALUES (SEQ_PROTECTORA_ID.NEXTVAL, 'B09876543', 'Refugio Animalia', '933445566', 'contacto@animalia.es', 'Valencia', 'Valencia', 'Camino de la Esperanza 12', '46020', 4);


-- 4. RAZAS
INSERT INTO RAZA (ID_RAZA, NOMBRE_RAZA) VALUES (SEQ_RAZA_ID.NEXTVAL, 'Labrador Retriever');
INSERT INTO RAZA (ID_RAZA, NOMBRE_RAZA) VALUES (SEQ_RAZA_ID.NEXTVAL, 'Bulldog Francés');
INSERT INTO RAZA (ID_RAZA, NOMBRE_RAZA) VALUES (SEQ_RAZA_ID.NEXTVAL, 'Mestizo Mediano');


-- 5. PERROS
-- Perros de la protectora Happy Paws Shelter (ID_PROTECTORA = 1)
INSERT INTO PERROS (ID_PERRO, NOMBRE, SEXO, FECHA_NACIMIENTO, ADOPTADO, FOTO, ID_PROTECTORA, ID_RAZAO)
VALUES (SEQ_PERRO_ID.NEXTVAL, 'Max', 'Macho', TO_DATE('2022-01-15', 'YYYY-MM-DD'), 'N', '/assets/Imagenes/perros/max_labrador.jpg', 1, 1);

INSERT INTO PERROS (ID_PERRO, NOMBRE, SEXO, FECHA_NACIMIENTO, ADOPTADO, FOTO, ID_PROTECTORA, ID_RAZA)
VALUES (SEQ_PERRO_ID.NEXTVAL, 'Bella', 'Hembra', TO_DATE('2021-11-01', 'YYYY-MM-DD'), 'N', '/assets/Imagenes/perros/bella_bulldog.jpg', 1, 2);

-- Perro de la protectora Refugio Animalia (ID_PROTECTORA = 2)
INSERT INTO PERROS (ID_PERRO, NOMBRE, SEXO, FECHA_NACIMIENTO, ADOPTADO, FOTO, ID_PROTECTORA, ID_RAZA)
VALUES (SEQ_PERRO_ID.NEXTVAL, 'Cooper', 'Macho', TO_DATE('2023-03-01', 'YYYY-MM-DD'), 'S', '/assets/Imagenes/perros/cooper_mestizo.jpg', 2, 3);


-- 6. PATOLOGIAS
INSERT INTO PATOLOGIA (ID_PATOLOGIA, NOMBRE, DESCRIPCION_PATOLOGIA)
VALUES (SEQ_PATOLOGIA_ID.NEXTVAL, 'Alergia al Polvo', 'Sensibilidad a los ácaros del polvo.');
INSERT INTO PATOLOGIA (ID_PATOLOGIA, NOMBRE, DESCRIPCION_PATOLOGIA)
VALUES (SEQ_PATOLOGIA_ID.NEXTVAL, 'Otitis Crónica', 'Inflamación recurrente del oído.');


-- 7. IDENTIFICACION_PATOLOGIAS
-- Max (ID_PERRO = 1) tiene Alergia al Polvo (ID_PATOLOGIA = 1)
INSERT INTO IDENTIFICACION_PATOLOGIAS (ID_PERRO, ID_PATOLOGIA, NOTAS_ESPECIFICAS)
VALUES (1, 1, 'Necesita limpieza frecuente de su cama y entorno.');


-- 8. RESERVAS_CITAS
-- Ana (ID_CLIENTE = 1) reserva cita con Max (ID_PERRO = 1) de la protectora Happy Paws (ID_PROTECTORA = 1)
INSERT INTO RESERVAS_CITAS (ID_RESERVA_CITA, FECHA, HORA, DONACION, ID_CLIENTE, ID_PERRO, ID_PROTECTORA, ESTADO_CITA)
VALUES (SEQ_RESERVA_CITA_ID.NEXTVAL, TO_DATE('2024-08-20', 'YYYY-MM-DD'), '11:00:00', 5.00, 1, 1, 1, 'Pendiente');

INSERT INTO RESERVAS_CITAS (ID_RESERVA_CITA, FECHA, HORA, DONACION, ID_CLIENTE, ID_PERRO, ID_PROTECTORA, ESTADO_CITA)
VALUES (SEQ_RESERVA_CITA_ID.NEXTVAL, TO_DATE('2024-09-20', 'YYYY-MM-DD'), '11:00:00', 5.00, 3, 3, 3, 'Completada');


-- 9. PETICIONES_ADOPCION
-- Carlos (ID_CLIENTE = 2) solicita adoptar a Bella (ID_PERRO = 2)
INSERT INTO PETICIONES_ADOPCION (ID_PETICION, FECHA, ESTADO_ADOPCION, ID_CLIENTE, ID_PERRO,id_protectora)
VALUES (SEQ_PETICION_ID.NEXTVAL, SYSDATE, 'Pendiente', 1, 3, 1);

            
-- 10. NOTIFICACION (Ejemplo, podría ser creada por triggers)
INSERT INTO NOTIFICACION (ID_NOTIFICACION, FECHA_GENERACION, MENSAJE, TIPO_NOTIFICACION, ID_ENTIDAD_RELACIONADA, ENTIDAD_TIPO)
VALUES (SEQ_NOTIFICACION_ID.NEXTVAL, SYSTIMESTAMP, 'Nueva reserva de cita para Max', 'NUEVA_CITA', 1, 'RESERVAS_CITAS');


-- 11. NOTIFICACIONES_RECIBIDAS
-- La notificación anterior (ID_NOTIFICACION = 1) es para el usuario de la protectora Happy Paws (ID_USUARIO = 2)
INSERT INTO NOTIFICACIONES_RECIBIDAS (ID_USUARIO, ID_NOTIFICACION, LEIDA, FECHA_LEIDA)
VALUES (2, 1, 'N', NULL);


-- 12. REDES_SOCIALES
-- Para Happy Paws Shelter (ID_PROTECTORA = 1)
INSERT INTO REDES_SOCIALES (ID_RED_SOCIAL, PLATAFORMA, URL, ID_PROTECTORA)
VALUES (SEQ_RED_SOCIAL_ID.NEXTVAL, 'Instagram', 'https://instagram.com/happypaws', 1);
INSERT INTO REDES_SOCIALES (ID_RED_SOCIAL, PLATAFORMA, URL, ID_PROTECTORA)
VALUES (SEQ_RED_SOCIAL_ID.NEXTVAL, 'Facebook', 'https://facebook.com/happypaws', 1);